import { ExecutorContext } from '@nx/devkit';
import { sync as fastGlobSync } from 'fast-glob';
import { parse, dirname, extname, join, relative } from 'path';
import { writeFileSync } from 'fs';
import { replaceWithNxVars } from '../../utilities/replace-with-nx-vars';
import { SyncComponentsExecutorSchema } from './schema';

export default async function syncComponents(options: SyncComponentsExecutorSchema, context: Required<ExecutorContext>) {
    const projectName = context.projectName;
    const project = context.projectsConfigurations.projects[projectName];
    const { entry, include, exclude } = {
        entry: replaceWithNxVars(options.entry, { projectRoot: project.root, options }),
        include: options.include.map((i) => replaceWithNxVars(i, { projectRoot: project.root, options })),
        exclude: (options.exclude || []).map((i) => replaceWithNxVars(i, { projectRoot: project.root, options }))
    };
    const relativeToEntry = (_filePath: string) => {
        const parsedPath = parse(_filePath);
        let filePath = _filePath;
        if (parsedPath.ext === extname(entry)) {
            if (parsedPath.ext === '.scss' && parsedPath.name.startsWith('_')) {
                filePath = join(dirname(filePath), parsedPath.name.slice(1));
            } else {
                filePath = join(dirname(_filePath), parsedPath.name);
            }
        }
        return './' + relative(dirname(entry), filePath);
    };
    const includedFiles = fastGlobSync(include, { ignore: exclude, onlyFiles: true })
        .map(filePath => `@import '${relativeToEntry(filePath)}';`);
    writeFileSync(entry, '/* Do not modify manually, this file is being generated by workspace-plugins:sync-components executor */\n' + includedFiles.join('\n') + '\n');
    return { success: true };
}
