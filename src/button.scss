@import "./settings";
@import "./mixins";
@import "./functions";
@import "./mixins/button/apply-colors";
@import "./mixins/button/standard";
@import "./mixins/button/negative";
@import "./mixins/button/positive";
@import "./mixins/button/emphasized";
@import "./mixins/button/light";

$fd-button-padding-x: 0.563rem; // fiori 3 spec
$fd-button-min-width: 2.25rem; // fiori 3 spec
$fd-button-icon-margin: 0.375rem;

$fd-button-compact-padding-x: 0.438rem; // fiori 3 spec
$fd-button-compact-min-width: 2rem; // fiori 3 spec
$fd-button-compact-height: $fd-spacing--base * 6.5 !default; // 26px
// anim
$fd-button-transition-params: $fd-animation--speed ease-in !default;

$block: #{$fd-namespace}-button;

@mixin isDisabled() {
  opacity: 0.4;
  cursor: not-allowed;

  &:focus {
    outline: none;
  }
}

@mixin focus() {
  outline: var(--sapContent_FocusWidth) dotted var(--sapContent_FocusColor);
  outline-offset: -0.1875rem;
}

@mixin buttonBase() {
  @include fd-var-size("height", $fd-forms-height, --fd-forms-height);
  @include fd-var-size("max-height", $fd-forms-height, --fd-forms-height);
  @include fd-var-size("min-width", $fd-forms-height, --fd-forms-height);
  @include fd-type("0");
  @include fd-icon-size("m", "before");
  @include fd-icon-size("m", "after");
  @include fd-var-size("line-height", $fd-button-line-height, --fd-button-line-height);

  padding-left: $fd-button-padding-x;
  padding-right: $fd-button-padding-x;
  text-align: center;

  // look
  border-style: solid;
  border-width: var(--sapButton_BorderWidth);

  // animation
  transition: all $fd-button-transition-params;

  // placements
  &::before {
    margin-right: $fd-button-icon-margin;
    vertical-align: text-bottom;
  }

  &::after {
    margin-left: $fd-button-icon-margin;
    vertical-align: middle;
  }

  @at-root {
    [dir="rtl"] &,
    &[dir="rtl"] {
      &::before {
        margin-right: 0;
        margin-left: $fd-button-icon-margin;
      }
    }
  }

  @at-root {
    [dir="rtl"] &,
    &[dir="rtl"] {
      &::after {
        margin-left: 0;
        margin-right: $fd-button-icon-margin;
      }
    }
  }

  &:empty {
    padding: 0;

    &::before,
    &::after {
      margin-right: 0;
      margin-left: 0;
    }
  }
}

@mixin buttonReset() {
  @include fd-reset();
  @include fd-button-reset();
  @include buttonBase();
}

@mixin compact() {
  // set metrics
  height: $fd-button-compact-height;
  max-height: $fd-button-compact-height;
  min-width: $fd-button-compact-min-width;
  padding-left: $fd-button-compact-padding-x;
  padding-right: $fd-button-compact-padding-x;

  @include fd-var-size("line-height", $fd-button-line-height--compact, --fd-button-line-height-compact);

  @at-root {
    .fd-for-touch & {
      @include fd-var-size("height", $fd-forms-height, --fd-forms-height);
      @include fd-var-size("min-width", $fd-forms-height, --fd-forms-height);
      @include fd-var-size("line-height", $fd-button-line-height, --fd-button-line-height);
    }

    .fd-for-compact & {
      @include fd-var-size("height", $fd-forms-height--compact, --fd-forms-height-compact);
      @include fd-var-size("min-width", $fd-forms-height--compact, --fd-forms-height-compact);
      @include fd-var-size("line-height", $fd-button-line-height--compact, --fd-button-line-height-compact);
    }
  }

  @include fd-screen(m) {
    @include fd-var-size("height", $fd-forms-height--compact, --fd-forms-height-compact);
    @include fd-var-size("min-width", $fd-forms-height--compact, --fd-forms-height-compact);
    @include fd-var-size("line-height", $fd-button-line-height--compact, --fd-button-line-height-compact);
  }
}

/*!
.fd-button+( (--compact), (--emphasized, --light), (--standard, --positive, --medium, --negative))+( (.is-disabled | [aria-disabled=true]) | (.is-selected | [aria-selected=true] | (.is-pressed | [aria-pressed=true]))
*/

.#{$block},
a.#{$block} {
  // spacing

  min-width: $fd-button-min-width;
  // BASE
  // set all reset and baseline block styles
  @include buttonReset();
  @include isStandard();

  &--text-alignment {
    &-left {
      text-align: left;
    }

    &-right {
      text-align: right;
    }

    &-center {
      text-align: center;
    }
  }

  &--half {
    --fd-forms-height-half: #{$fd-forms-height/2};

    @include fd-var-size("height", $fd-forms-height/2, --fd-forms-height-half);
    @include fd-var-size("max-height", $fd-forms-height/2, --fd-forms-height-half);

    line-height: 1;

    &.#{$block}--compact {
      --fd-forms-height-half: #{$fd-forms-height--compact/2};

      @include fd-var-size("height", $fd-forms-height--compact/2, --fd-forms-height-half);
      @include fd-var-size("max-height", $fd-forms-height--compact/2, --fd-forms-height-half);

      line-height: 1;
    }
  }

  // compact sizes (see `core/root` for css vars rules)

  &--standard {
    @include buttonReset();
    @include isStandard();
  }

  &--positive {
    @include buttonReset();
    @include isPositive();
  }

  &--negative {
    @include buttonReset();
    @include isNegative();
  }

  &--menu {
    @include fd-icon("navigation-down-arrow", "s", "after");
    $menu-button-max-width: 12rem;
    $icon-width: 0.656rem;
    $icon-position-top: 0.67rem;
    $menu-button-padding: $fd-button-padding-x + $fd-button-icon-margin + $icon-width;
    $empty-navigation-arrow-space: 2 * $fd-button-icon-margin + $icon-width;

    max-width: $menu-button-max-width;
    position: relative;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    padding-right: $menu-button-padding;

    &::after {
      position: absolute;
      top: $icon-position-top;
    }

    &:empty {
      // 0.75
      padding-right: $empty-navigation-arrow-space;

      &::before {
        margin-right: 0;
        margin-left: $fd-button-icon-margin;
      }

      &::after {
        margin-right: $fd-button-icon-margin;
        margin-left: $fd-button-icon-margin;
      }
    }

    @at-root {
      [dir="rtl"] &,
      &[dir="rtl"] {
        padding-left: $menu-button-padding;
        padding-right: $fd-button-padding-x;

        &:empty {
          &::before {
            margin-left: 0;
          }
        }
      }
    }
  }

  &--emphasized {
    @include buttonReset();
    @include isEmphasized();
  }

  // .fd-button--light
  &--light {
    @include buttonReset();
    @include isLight();
  }

  &--compact {
    @include compact();
  }
}

@mixin buttonContainerDisabled() {
  > .#{$block},
  > .#{$block}--standard {
    @include standardDisabled();
  }

  > .#{$block}--positive {
    @include positiveDisabled();
  }

  > .#{$block}--negative {
    @include negativeDisabled();
  }

  > .#{$block}--emphasized {
    @include emphasizedDisabled();
  }

  > .#{$block}--light {
    @include lightDisabled();
  }
}

.fd-button--container {
  @include fd-button-reset();

  /* (2.75(clickable area) - 2.25(visual height of button)) / 2 */
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  background-color: transparent;
  cursor: pointer;

  @include fd-hover() {
    > .#{$block},
    > .#{$block}--standard {
      @include standardHover();
    }

    > .#{$block}--positive {
      @include positiveHover();
    }

    > .#{$block}--negative {
      @include negativeHover();
    }

    > .#{$block}--emphasized {
      @include emphasizedHover();
    }

    > .#{$block}--light {
      @include lightHover();
    }
  }

  @include fd-active-pressed-selected() {
    outline: none;

    > .#{$block},
    > .#{$block}--standard {
      @include standardPressed();
    }

    > .#{$block}--positive {
      @include positivePressed();
    }

    > .#{$block}--negative {
      @include negativePressed();
    }

    > .#{$block}--emphasized {
      @include emphasizedPressed();
    }

    > .#{$block}--light {
      @include lightPressed();
    }

    @include fd-disabled() {
      @include buttonContainerDisabled();
    }
  }

  @include fd-disabled() {
    cursor: not-allowed;

    @include buttonContainerDisabled();
  }
}
