var e=Object.defineProperty,o=(o,s)=>e(o,"name",{value:s,configurable:!0});/* empty css                     *//* empty css                  *//* empty css                   *//* empty css              *//* empty css                */const s={title:"Components/Forms/Form Message",parameters:{storySource:{source:'import \'../../../../src/form-message.scss\';\nimport \'../../../../src/form-item.scss\';\nimport \'../../../../src/form-label.scss\';\nimport \'../../../../src/input.scss\';\nimport \'../../../../src/popover.scss\';\nexport default {\n    title: \'Components/Forms/Form Message\',\n    parameters: {\n        description: `\nA form message can appear as a result of interacting with an input field. It essentially sends semantic feedback to the user, informing them whether the data they entered was successful, erroneous, needs further attention, or more.\n\n##Highlight indicators\nForm messages can be displayed in various semantic states by adding the following classes to the \\`fd-input\\` element:\n\nStates | Class | Description\n:----- | :---- | :----------\nDefault | _n/a_ | The field is editable, but no validation has occurred.\nSuccess | \\`is-success\\` | The data format entered has been validated and is correct, such as an email address.\nError |\\`is-error\\` | The data entered is not valid and must be corrected, stopping the user from moving forward.\nWarning | \\`is-warning\\` | The data entered is formatted correctly but there are other issues that are problematic. However, these issues will not stop the user from moving forward.\nDisabled | \\`is-disabled\\` | Indicates the field is not editable. This state is commonly used when the field is dependent on a previous entry/selection within the form.\nRead-only&nbsp;&nbsp;&nbsp; | \\`is-readonly\\`&nbsp;&nbsp;&nbsp; | Used to display static information in the context of a form.\n\n        `,\n        tags: [\'f3\', \'a11y\', \'theme\']\n    }\n};\n\nexport const Success = () => `<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1bb">Success input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB2" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB2\')" onfocusout="onPopoverClick(\'popoverB2\')">\n                <input class="fd-input is-success" type="text" id="input-1bb" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB2">\n                <div class="fd-form-message fd-form-message--success">Success message</div>\n            </div>\n        </div>\n    </div>\n`;\n\nSuccess.parameters = {\n    docs: {\n        description: {\n            story: `To display a success message below an input field, add the \\`--success\\` modifier class to the \\`fd-form-message\\` element.\n        `\n        }\n    }\n};\n\nexport const Error = () => `<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1cc">Error input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB3" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB3\')" onfocusout="onPopoverClick(\'popoverB3\')">\n                <input class="fd-input is-error" type="text" id="input-1cc" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB3">\n                <div class="fd-form-message fd-form-message--error" >Error message</div>\n            </div>\n        </div>\n    </div>\n`;\n\nError.parameters = {\n    docs: {\n        description: {\n            story: `To display an error message below an input field, add the \\`--error\\` modifier class to the \\`fd-form-message\\` element.\n        `\n        }\n    }\n};\n\nexport const Warning = () => `<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1cc">Warning input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB4" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB4\')" onfocusout="onPopoverClick(\'popoverB4\')">\n                <input class="fd-input is-warning" type="text" id="input-1cc" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB4">\n            <div class="fd-form-message fd-form-message--warning" >Warning message</div>\n            </div>\n        </div>\n    </div>\n`;\n\nWarning.parameters = {\n    docs: {\n        description: {\n            story: `To display a warning message below an input field, add the \\`--warning\\` modifier class to the \\`fd-form-message\\` element.\n        `\n        }\n    }\n};\n\nexport const Information = () => `<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1ee">Information input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB5" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB5\')" onfocusout="onPopoverClick(\'popoverB5\')">\n                <input class="fd-input fd-input--compact is-information" type="text" id="input-1ee" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB5">\n                <div class="fd-form-message fd-form-message--information">Information message</div>\n            </div>\n        </div>\n    </div>\n`;\n\nInformation.parameters = {\n    docs: {\n        description: {\n            story: `To display an information message below an input field, add the \\`--information\\` modifier class to the \\`fd-form-message\\` element.\n        `\n        }\n    }\n};\n',locationsMap:{success:{startLoc:{col:23,line:29},endLoc:{col:1,line:41},startBody:{col:23,line:29},endBody:{col:1,line:41}},error:{startLoc:{col:21,line:52},endLoc:{col:1,line:64},startBody:{col:21,line:52},endBody:{col:1,line:64}},warning:{startLoc:{col:23,line:75},endLoc:{col:1,line:87},startBody:{col:23,line:75},endBody:{col:1,line:87}},information:{startLoc:{col:27,line:98},endLoc:{col:1,line:110},startBody:{col:27,line:98},endBody:{col:1,line:110}}}},description:"\nA form message can appear as a result of interacting with an input field. It essentially sends semantic feedback to the user, informing them whether the data they entered was successful, erroneous, needs further attention, or more.\n\n##Highlight indicators\nForm messages can be displayed in various semantic states by adding the following classes to the `fd-input` element:\n\nStates | Class | Description\n:----- | :---- | :----------\nDefault | _n/a_ | The field is editable, but no validation has occurred.\nSuccess | `is-success` | The data format entered has been validated and is correct, such as an email address.\nError |`is-error` | The data entered is not valid and must be corrected, stopping the user from moving forward.\nWarning | `is-warning` | The data entered is formatted correctly but there are other issues that are problematic. However, these issues will not stop the user from moving forward.\nDisabled | `is-disabled` | Indicates the field is not editable. This state is commonly used when the field is dependent on a previous entry/selection within the form.\nRead-only&nbsp;&nbsp;&nbsp; | `is-readonly`&nbsp;&nbsp;&nbsp; | Used to display static information in the context of a form.\n\n        ",tags:["f3","a11y","theme"]}},n=o(()=>'<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1bb">Success input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB2" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB2\')" onfocusout="onPopoverClick(\'popoverB2\')">\n                <input class="fd-input is-success" type="text" id="input-1bb" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB2">\n                <div class="fd-form-message fd-form-message--success">Success message</div>\n            </div>\n        </div>\n    </div>\n',"Success");n.parameters={docs:{description:{story:"To display a success message below an input field, add the `--success` modifier class to the `fd-form-message` element.\n        "}}};const r=o(()=>'<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1cc">Error input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB3" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB3\')" onfocusout="onPopoverClick(\'popoverB3\')">\n                <input class="fd-input is-error" type="text" id="input-1cc" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB3">\n                <div class="fd-form-message fd-form-message--error" >Error message</div>\n            </div>\n        </div>\n    </div>\n',"Error");r.parameters={docs:{description:{story:"To display an error message below an input field, add the `--error` modifier class to the `fd-form-message` element.\n        "}}};const a=o(()=>'<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1cc">Warning input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB4" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB4\')" onfocusout="onPopoverClick(\'popoverB4\')">\n                <input class="fd-input is-warning" type="text" id="input-1cc" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB4">\n            <div class="fd-form-message fd-form-message--warning" >Warning message</div>\n            </div>\n        </div>\n    </div>\n',"Warning");a.parameters={docs:{description:{story:"To display a warning message below an input field, add the `--warning` modifier class to the `fd-form-message` element.\n        "}}};const i=o(()=>'<div class="fd-form-item">\n        <label class="fd-form-label" for="input-1ee">Information input:</label>\n        <div class="fd-form-input-message-group fd-popover">\n            <div class="fd-popover__control" aria-controls="popoverB5" aria-expanded="false" aria-haspopup="true"\n                 onfocusin="onPopoverClick(\'popoverB5\')" onfocusout="onPopoverClick(\'popoverB5\')">\n                <input class="fd-input fd-input--compact is-information" type="text" id="input-1ee" placeholder="Field placeholder text" aria-label="Image label">\n            </div>\n            <div class="fd-popover__body fd-popover__body--input-message-group fd-popover__body--no-arrow" aria-hidden="true" id="popoverB5">\n                <div class="fd-form-message fd-form-message--information">Information message</div>\n            </div>\n        </div>\n    </div>\n',"Information");i.parameters={docs:{description:{story:"To display an information message below an input field, add the `--information` modifier class to the `fd-form-message` element.\n        "}}};const t=["Success","Error","Warning","Information"];export{r as Error,i as Information,n as Success,a as Warning,t as __namedExportsOrder,s as default};
