var e=Object.defineProperty,n=(n,t)=>e(n,"name",{value:t,configurable:!0});/* empty css                 */const t={title:"Title",parameters:{storySource:{source:'import \'fn/src/fn-title.scss\';\n\nexport default {\n  title: \'Title\',\n  parameters: {\n    description: `\nA title component whose semantic level and visual appearance can be set separately, providing flexibility in design while adhering to accessibility best practices.`,\n    tags: []\n  }\n};\nconst localStyles = `\n<style>\n    .docs-story {\n        background: white;\n    }\n</style>\n`;\nexport const Levels = () => `${localStyles}\n<h1 class="fn-title fn-title--h1">Title Heading 1</h1>\n<br>\n<h2 class="fn-title fn-title--h2">Title Heading 2</h2>\n<br>\n<h3 class="fn-title fn-title--h3">Title Heading 3</h3>\n<br>\n<h4 class="fn-title fn-title--h4">Title Heading 4</h4>\n<br>\n<h5 class="fn-title fn-title--h5">Title Heading 5</h5>\n<br>\n<h6 class="fn-title fn-title--h6">Title Heading 6</h6>\n`;\nLevels.storyName = \'Semantic Level\';\nLevels.parameters = {\n  docs: {\n    iframeHeight: 250,\n    description: {\n      story: \'There are 6 semantic levels of a heading element. There should only be one H1 on a page, and headings should only appear in ascending order without skipping a level; i.e. even if there are only 3 levels on a page, the order must be H1-H2-H3, and no other levels used.\'\n    }\n  }\n};\nexport const VisualLevel = () => `${localStyles}\n<h1 class="fn-title fn-title--h6">Title Heading 1</h1>\n<br>\n<h2 class="fn-title fn-title--h5">Title Heading 2</h2>\n<br>\n<h3 class="fn-title fn-title--h4">Title Heading 3</h3>\n<br>\n<h4 class="fn-title fn-title--h3">Title Heading 4</h4>\n<br>\n<h5 class="fn-title fn-title--h2">Title Heading 5</h5>\n<br>\n<h6 class="fn-title fn-title--h1">Title Heading 6</h6>\n`;\nVisualLevel.parameters = {\n  docs: {\n    iframeHeight: 250,\n    description: {\n      story: \'If a design requires it, the visual level can be set to something different than the semantic level. This allows the sequential order to be maintained while providing flexibility in appearance.\'\n    }\n  }\n};\nexport const Wrapping = () => `${localStyles}\n<div style="width: 600px">\n    <h1 class="fn-title fn-title--h1 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h1>\n    <br><br><br>\n    <h2 class="fn-title fn-title--h2 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h2>\n    <br><br><br>\n    <h3 class="fn-title fn-title--h3 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h3>\n    <br><br><br>\n    <h4 class="fn-title fn-title--h4 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h4>\n    <br><br><br>\n    <h5 class="fn-title fn-title--h5 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h5>\n    <br><br><br>\n    <h6 class="fn-title fn-title--h6 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h6>\n</div>\n`;\nWrapping.storyName = \'Text Wrapping\';\nWrapping.parameters = {\n  docs: {\n    iframeHeight: 300,\n    description: {\n      story: \'Add the `--wrap` modifier to cause the overflow text to wrap instead.\'\n    }\n  }\n};\n',locationsMap:{levels:{startLoc:{col:22,line:18},endLoc:{col:1,line:30},startBody:{col:22,line:18},endBody:{col:1,line:30}},"visual-level":{startLoc:{col:27,line:40},endLoc:{col:1,line:52},startBody:{col:27,line:40},endBody:{col:1,line:52}},wrapping:{startLoc:{col:24,line:61},endLoc:{col:1,line:75},startBody:{col:24,line:61},endBody:{col:1,line:75}}}},description:"\nA title component whose semantic level and visual appearance can be set separately, providing flexibility in design while adhering to accessibility best practices.",tags:[]}},i="\n<style>\n    .docs-story {\n        background: white;\n    }\n</style>\n",l=n(()=>i+'\n<h1 class="fn-title fn-title--h1">Title Heading 1</h1>\n<br>\n<h2 class="fn-title fn-title--h2">Title Heading 2</h2>\n<br>\n<h3 class="fn-title fn-title--h3">Title Heading 3</h3>\n<br>\n<h4 class="fn-title fn-title--h4">Title Heading 4</h4>\n<br>\n<h5 class="fn-title fn-title--h5">Title Heading 5</h5>\n<br>\n<h6 class="fn-title fn-title--h6">Title Heading 6</h6>\n',"Levels");l.storyName="Semantic Level",l.parameters={docs:{iframeHeight:250,description:{story:"There are 6 semantic levels of a heading element. There should only be one H1 on a page, and headings should only appear in ascending order without skipping a level; i.e. even if there are only 3 levels on a page, the order must be H1-H2-H3, and no other levels used."}}};const a=n(()=>i+'\n<h1 class="fn-title fn-title--h6">Title Heading 1</h1>\n<br>\n<h2 class="fn-title fn-title--h5">Title Heading 2</h2>\n<br>\n<h3 class="fn-title fn-title--h4">Title Heading 3</h3>\n<br>\n<h4 class="fn-title fn-title--h3">Title Heading 4</h4>\n<br>\n<h5 class="fn-title fn-title--h2">Title Heading 5</h5>\n<br>\n<h6 class="fn-title fn-title--h1">Title Heading 6</h6>\n',"VisualLevel");a.parameters={docs:{iframeHeight:250,description:{story:"If a design requires it, the visual level can be set to something different than the semantic level. This allows the sequential order to be maintained while providing flexibility in appearance."}}};const s=n(()=>i+'\n<div style="width: 600px">\n    <h1 class="fn-title fn-title--h1 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h1>\n    <br><br><br>\n    <h2 class="fn-title fn-title--h2 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h2>\n    <br><br><br>\n    <h3 class="fn-title fn-title--h3 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h3>\n    <br><br><br>\n    <h4 class="fn-title fn-title--h4 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h4>\n    <br><br><br>\n    <h5 class="fn-title fn-title--h5 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h5>\n    <br><br><br>\n    <h6 class="fn-title fn-title--h6 fn-title--wrap">"Insanity: doing the same thing over and over again and expecting different results." - Albert Einstein</h6>\n</div>\n',"Wrapping");s.storyName="Text Wrapping",s.parameters={docs:{iframeHeight:300,description:{story:"Add the `--wrap` modifier to cause the overflow text to wrap instead."}}};const r=["Levels","VisualLevel","Wrapping"];export{l as Levels,a as VisualLevel,s as Wrapping,r as __namedExportsOrder,t as default};
