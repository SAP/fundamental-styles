var o=Object.defineProperty,r=(r,e)=>o(r,"name",{value:e,configurable:!0});const e={title:"Colors",parameters:{storySource:{source:'import \'../../src/sap-colors.scss\';\n\nexport default {\n    title: \'Colors\',\n    parameters: {\n        description: \'\',\n        docs: { iframeHeight: 500 }\n    }\n};\n\nconst localStyles = `\n<style>\n    div.demo {\n        display: flex;\n        height: 4rem;\n        width: 8rem;\n    }\n</style>\n`;\nexport const TextColor = () => `${localStyles}\n<h3>brandColor (--sapBrandColor)</h3>\n<div class="sap-color-brandColor">TEXT</div>\n<br>\n<h3>positiveTextColor (--sapPositiveTextColor)</h3>\n<div class="sap-color-positiveTextColor">TEXT</div>\n<br>\n<h3>criticalTextColor (--sapCriticalTextColor)</h3>\n<div class="sap-color-criticalTextColor">TEXT</div>\n<br>\n<h3>negativeTextColor (--sapNegativeTextColor)</h3>\n<div class="sap-color-negativeTextColor">TEXT</div>\n<br>\n<h3>informativeTextColor (--sapInformativeTextColor)</h3>\n<div class="sap-color-informativeTextColor">TEXT</div>\n<br>\n<h3>neutralTextColor (--sapNeutralTextColor)</h3>\n<div class="sap-color-neutralTextColor">TEXT</div>\n`;\n\nTextColor.parameters = {\n    docs: {\n        iframeHeight: 150,\n        description: {\n            story: `To set the text color of an element use the class <code>.sap-color-<i style="color: red;">colorName</i></code>, where <i style="color: red;">colorName</i> is the base of the css variable from the SAP-theming package that represent the desired color. <br><br>\n            <b>SCSS Mixin:</b> \n            <code>@include  sap-color(colorName)</code>\n            `\n        }\n    }\n};\n\nexport const BackgroundColor = () => `${localStyles}\n<h3>brandColor (--sapBrandColor)</h3>\n<div class="demo sap-bg-color-brandColor"></div>\n<br>\n<h3>errorBackground (--sapErrorBackground)</h3>\n<div class="demo sap-bg-color-errorBackground"></div>\n<br>\n<h3>warningBackground (--sapWarningBackground)</h3>\n<div class="demo sap-bg-color-warningBackground"></div>\n<br>\n<h3>successBackground (--sapSuccessBackground)</h3>\n<div class="demo sap-bg-color-successBackground"></div>\n<br>\n<h3>informationBackground (--sapInformationBackground)</h3>\n<div class="demo sap-bg-color-informationBackground"></div>\n<br>\n<h3>neutralBackground (--sapNeutralBackground)</h3>\n<div class="demo sap-bg-color-neutralBackground"></div>\n`;\n\nBackgroundColor.parameters = {\n    docs: {\n        iframeHeight: 150,\n        description: {\n            story: `To set the background color of an element use the class <code>.sap-bg-color-<i style="color: red;">colorName</i></code>, where <i style="color: red;">colorName</i> is the base of the css variable from the SAP-theming package that represent the desired color. <br><br>\n            <b>SCSS Mixin:</b> \n            <code>@include  sap-bg-color(colorName)</code>\n            `\n        }\n    }\n};\n',locationsMap:{"text-color":{startLoc:{col:25,line:20},endLoc:{col:1,line:38},startBody:{col:25,line:20},endBody:{col:1,line:38}},"background-color":{startLoc:{col:31,line:52},endLoc:{col:1,line:70},startBody:{col:31,line:52},endBody:{col:1,line:70}}}},description:"",docs:{iframeHeight:500}}},n="\n<style>\n    div.demo {\n        display: flex;\n        height: 4rem;\n        width: 8rem;\n    }\n</style>\n",a=r(()=>n+'\n<h3>brandColor (--sapBrandColor)</h3>\n<div class="sap-color-brandColor">TEXT</div>\n<br>\n<h3>positiveTextColor (--sapPositiveTextColor)</h3>\n<div class="sap-color-positiveTextColor">TEXT</div>\n<br>\n<h3>criticalTextColor (--sapCriticalTextColor)</h3>\n<div class="sap-color-criticalTextColor">TEXT</div>\n<br>\n<h3>negativeTextColor (--sapNegativeTextColor)</h3>\n<div class="sap-color-negativeTextColor">TEXT</div>\n<br>\n<h3>informativeTextColor (--sapInformativeTextColor)</h3>\n<div class="sap-color-informativeTextColor">TEXT</div>\n<br>\n<h3>neutralTextColor (--sapNeutralTextColor)</h3>\n<div class="sap-color-neutralTextColor">TEXT</div>\n',"TextColor");a.parameters={docs:{iframeHeight:150,description:{story:'To set the text color of an element use the class <code>.sap-color-<i style="color: red;">colorName</i></code>, where <i style="color: red;">colorName</i> is the base of the css variable from the SAP-theming package that represent the desired color. <br><br>\n            <b>SCSS Mixin:</b> \n            <code>@include  sap-color(colorName)</code>\n            '}}};const s=r(()=>n+'\n<h3>brandColor (--sapBrandColor)</h3>\n<div class="demo sap-bg-color-brandColor"></div>\n<br>\n<h3>errorBackground (--sapErrorBackground)</h3>\n<div class="demo sap-bg-color-errorBackground"></div>\n<br>\n<h3>warningBackground (--sapWarningBackground)</h3>\n<div class="demo sap-bg-color-warningBackground"></div>\n<br>\n<h3>successBackground (--sapSuccessBackground)</h3>\n<div class="demo sap-bg-color-successBackground"></div>\n<br>\n<h3>informationBackground (--sapInformationBackground)</h3>\n<div class="demo sap-bg-color-informationBackground"></div>\n<br>\n<h3>neutralBackground (--sapNeutralBackground)</h3>\n<div class="demo sap-bg-color-neutralBackground"></div>\n',"BackgroundColor");s.parameters={docs:{iframeHeight:150,description:{story:'To set the background color of an element use the class <code>.sap-bg-color-<i style="color: red;">colorName</i></code>, where <i style="color: red;">colorName</i> is the base of the css variable from the SAP-theming package that represent the desired color. <br><br>\n            <b>SCSS Mixin:</b> \n            <code>@include  sap-bg-color(colorName)</code>\n            '}}};const l=["TextColor","BackgroundColor"];export{s as BackgroundColor,a as TextColor,l as __namedExportsOrder,e as default};
