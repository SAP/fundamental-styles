var e=Object.defineProperty,t=(t,i)=>e(t,"name",{value:i,configurable:!0});/* empty css              */const i={title:"Components/Title",parameters:{storySource:{source:'import \'../../../src/title.scss\';\nexport default {\n    title: \'Components/Title\',\n    parameters: {\n        description: `\nA title component whose semantic level and visual appearance can be set separately, providing flexibility in design while adhering to accessibility best practices.`,\n        tags: [\'f3\']\n    }\n};\n\nexport const Levels = () => `<h1 class="fd-title fd-title--h1">Title Level 1</h1>\n<h2 class="fd-title fd-title--h2">Title Level 2</h2>\n<h3 class="fd-title fd-title--h3">Title Level 3</h3>\n<h4 class="fd-title fd-title--h4">Title Level 4</h4>\n<h5 class="fd-title fd-title--h5">Title Level 5</h5>\n<h6 class="fd-title fd-title--h6">Title Level 6</h6>\n`;\n\nLevels.storyName = \'Semantic Level\';\nLevels.parameters = {\n    docs: {\n        iframeHeight: 250,\n        description: {\n            story: \'There are 6 semantic levels of a heading element. There should only be one H1 on a page, and headings should only appear in ascending order without skipping a level; i.e. even if there are only 3 levels on a page, the order must be H1-H2-H3, and no other levels used.\'\n        }\n    }\n};\n\nexport const VisualLevel = () => `<h1 class="fd-title fd-title--h6">Title Level 1</h1>\n<h2 class="fd-title fd-title--h5">Title Level 2</h2>\n<h3 class="fd-title fd-title--h4">Title Level 3</h3>\n<h4 class="fd-title fd-title--h3">Title Level 4</h4>\n<h5 class="fd-title fd-title--h2">Title Level 5</h5>\n<h6 class="fd-title fd-title--h1">Title Level 6</h6>\n`;\n\nVisualLevel.parameters = {\n    docs: {\n        iframeHeight: 250,\n        description: {\n            story: \'If a design requires it, the visual level can be set to something different than the semantic level. This allows the sequential order to be maintained while providing flexibility in appearance.\'\n        }\n    }\n};\n\nexport const Elision = () => `<div style="width: 300px">\n    <h1 class="fd-title fd-title--h1">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h1>\n    <h2 class="fd-title fd-title--h2">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h2>\n    <h3 class="fd-title fd-title--h3">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h3>\n    <h4 class="fd-title fd-title--h4">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h4>\n    <h5 class="fd-title fd-title--h5">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h5>\n    <h6 class="fd-title fd-title--h6">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h6>\n</div>\n`;\n\nElision.storyName = \'Text Elision\';\nElision.parameters = {\n    docs: {\n        iframeHeight: 250,\n        description: {\n            story: \'By default the Title text overflow will be elided when longer than its container.\'\n        }\n    }\n};\n\nexport const Wrapping = () => `<div style="width: 300px">\n    <h1 class="fd-title fd-title--h1 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h1>\n    <h2 class="fd-title fd-title--h2 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h2>\n    <h3 class="fd-title fd-title--h3 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h3>\n    <h4 class="fd-title fd-title--h4 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h4>\n    <h5 class="fd-title fd-title--h5 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h5>\n    <h6 class="fd-title fd-title--h6 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h6>\n</div>\n`;\n\nWrapping.storyName = \'Text Wrapping\';\nWrapping.parameters = {\n    docs: {\n        iframeHeight: 300,\n        description: {\n            story: \'Add the `--wrap` modifier to cause the overflow text to wrap instead.\'\n        }\n    }\n};\n',locationsMap:{levels:{startLoc:{col:22,line:11},endLoc:{col:1,line:17},startBody:{col:22,line:11},endBody:{col:1,line:17}},"visual-level":{startLoc:{col:27,line:29},endLoc:{col:1,line:35},startBody:{col:27,line:29},endBody:{col:1,line:35}},elision:{startLoc:{col:23,line:46},endLoc:{col:1,line:54},startBody:{col:23,line:46},endBody:{col:1,line:54}},wrapping:{startLoc:{col:24,line:66},endLoc:{col:1,line:74},startBody:{col:24,line:66},endBody:{col:1,line:74}}}},description:"\nA title component whose semantic level and visual appearance can be set separately, providing flexibility in design while adhering to accessibility best practices.",tags:["f3"]}},l=t(()=>'<h1 class="fd-title fd-title--h1">Title Level 1</h1>\n<h2 class="fd-title fd-title--h2">Title Level 2</h2>\n<h3 class="fd-title fd-title--h3">Title Level 3</h3>\n<h4 class="fd-title fd-title--h4">Title Level 4</h4>\n<h5 class="fd-title fd-title--h5">Title Level 5</h5>\n<h6 class="fd-title fd-title--h6">Title Level 6</h6>\n',"Levels");l.storyName="Semantic Level",l.parameters={docs:{iframeHeight:250,description:{story:"There are 6 semantic levels of a heading element. There should only be one H1 on a page, and headings should only appear in ascending order without skipping a level; i.e. even if there are only 3 levels on a page, the order must be H1-H2-H3, and no other levels used."}}};const s=t(()=>'<h1 class="fd-title fd-title--h6">Title Level 1</h1>\n<h2 class="fd-title fd-title--h5">Title Level 2</h2>\n<h3 class="fd-title fd-title--h4">Title Level 3</h3>\n<h4 class="fd-title fd-title--h3">Title Level 4</h4>\n<h5 class="fd-title fd-title--h2">Title Level 5</h5>\n<h6 class="fd-title fd-title--h1">Title Level 6</h6>\n',"VisualLevel");s.parameters={docs:{iframeHeight:250,description:{story:"If a design requires it, the visual level can be set to something different than the semantic level. This allows the sequential order to be maintained while providing flexibility in appearance."}}};const n=t(()=>'<div style="width: 300px">\n    <h1 class="fd-title fd-title--h1">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h1>\n    <h2 class="fd-title fd-title--h2">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h2>\n    <h3 class="fd-title fd-title--h3">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h3>\n    <h4 class="fd-title fd-title--h4">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h4>\n    <h5 class="fd-title fd-title--h5">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h5>\n    <h6 class="fd-title fd-title--h6">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h6>\n</div>\n',"Elision");n.storyName="Text Elision",n.parameters={docs:{iframeHeight:250,description:{story:"By default the Title text overflow will be elided when longer than its container."}}};const a=t(()=>'<div style="width: 300px">\n    <h1 class="fd-title fd-title--h1 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h1>\n    <h2 class="fd-title fd-title--h2 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h2>\n    <h3 class="fd-title fd-title--h3 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h3>\n    <h4 class="fd-title fd-title--h4 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h4>\n    <h5 class="fd-title fd-title--h5 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h5>\n    <h6 class="fd-title fd-title--h6 fd-title--wrap">Lorem ipsum dolor sit amet, consectetur adipiscing elit</h6>\n</div>\n',"Wrapping");a.storyName="Text Wrapping",a.parameters={docs:{iframeHeight:300,description:{story:"Add the `--wrap` modifier to cause the overflow text to wrap instead."}}};const o=["Levels","VisualLevel","Elision","Wrapping"];export{n as Elision,l as Levels,s as VisualLevel,a as Wrapping,o as __namedExportsOrder,i as default};
