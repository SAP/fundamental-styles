var e=Object.defineProperty;const o={title:"Border",parameters:{storySource:{source:"export default {\n    title: 'Border',\n    parameters: {\n        description: `\n      `,\n        docs: { iframeHeight: 500 }\n    }\n};\n\nexport const Border = () => `<div>\n1. All\n\n<pre>@include sap-border(0.125rem, solid, #000);</pre>\n<br>\n\n2. Top Border\n<pre>@include sap-border(0.125rem, solid, #000, top);</pre>\n<br>\n\n3. Bottom Border\n<pre>@include sap-border(0.125rem, solid, #000, bottom);</pre>\n<br>\n\n4. Left Border\n<pre>@include sap-border(0.125rem, solid, #000, left);</pre>\n<br>\n\n6. Right Border\n<pre>@include sap-border(0.125rem, solid, #000, right);</pre>\n<br>\n\n7. Top and Bottom Border (y)\n<pre>@include sap-border(0.125rem, solid, #000, y);</pre>\n<br>\n\n8. Left and Right Border (x)\n<pre>@include sap-border(0.125rem, solid, #000, x);</pre>\n<br>\n\n</div>`;\nBorder.storyName = 'Mixin sap-border';\nBorder.parameters = {\n    docs: {\n        iframeHeight: 500,\n        description: {\n            story: 'The <code>sap-border</code> helper mixin allows you to specify the width, style, and color of an element\\'s border. This is achieved by providing values to the <code>sap-border</code> parameters: <code>$width</code>, <code>$style</code>, <code>$color</code>, and <code>$pos</code>.<br><br> The <code>$pos</code> value can be one of the following: <code>all | top | bottom | left | right | x | y</code>. The default value is <code>all</code>, which will apply borders on all sides. <code>x</code> will set borders on left and right of the element, and <code>y</code> on top and bottom of the element.'\n        }\n    }\n};\n\n",locationsMap:{border:{startLoc:{col:22,line:10},endLoc:{col:7,line:40},startBody:{col:22,line:10},endBody:{col:7,line:40}}}},description:"\n      ",docs:{iframeHeight:500}}},r=((o,r)=>e(o,"name",{value:r,configurable:!0}))(()=>"<div>\n1. All\n\n<pre>@include sap-border(0.125rem, solid, #000);</pre>\n<br>\n\n2. Top Border\n<pre>@include sap-border(0.125rem, solid, #000, top);</pre>\n<br>\n\n3. Bottom Border\n<pre>@include sap-border(0.125rem, solid, #000, bottom);</pre>\n<br>\n\n4. Left Border\n<pre>@include sap-border(0.125rem, solid, #000, left);</pre>\n<br>\n\n6. Right Border\n<pre>@include sap-border(0.125rem, solid, #000, right);</pre>\n<br>\n\n7. Top and Bottom Border (y)\n<pre>@include sap-border(0.125rem, solid, #000, y);</pre>\n<br>\n\n8. Left and Right Border (x)\n<pre>@include sap-border(0.125rem, solid, #000, x);</pre>\n<br>\n\n</div>","Border");r.storyName="Mixin sap-border",r.parameters={docs:{iframeHeight:500,description:{story:"The <code>sap-border</code> helper mixin allows you to specify the width, style, and color of an element's border. This is achieved by providing values to the <code>sap-border</code> parameters: <code>$width</code>, <code>$style</code>, <code>$color</code>, and <code>$pos</code>.<br><br> The <code>$pos</code> value can be one of the following: <code>all | top | bottom | left | right | x | y</code>. The default value is <code>all</code>, which will apply borders on all sides. <code>x</code> will set borders on left and right of the element, and <code>y</code> on top and bottom of the element."}}};const d=["Border"];export{r as Border,d as __namedExportsOrder,o as default};
